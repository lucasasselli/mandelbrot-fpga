-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\mandelbrot_core.vhd
-- Created: 2019-10-07 19:53:20
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mandelbrot_core
-- Source Path: mandelbrot_fpga/mandelbrot_top/mandelbrot_core
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.mandelbrot_top_pkg.ALL;

ENTITY mandelbrot_core IS
  PORT( i_clk                             :   IN    std_logic;
        i_reset_n                         :   IN    std_logic;
        zoom                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        horizontal_offset                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        vertical_offset                   :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        enable                            :   IN    std_logic;
        video_test                        :   IN    std_logic;
        video_enable                      :   OUT   std_logic;
        horizontal_sync                   :   OUT   std_logic;
        vertical_sync                     :   OUT   std_logic;
        red                               :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        green                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        blue                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END mandelbrot_core;


ARCHITECTURE rtl OF mandelbrot_core IS

  -- Component Declarations
  COMPONENT vga_driver
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          enable                          :   IN    std_logic;
          horizontal_index                :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          vertical_index                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          video_enable                    :   OUT   std_logic;
          horizontal_sync                 :   OUT   std_logic;
          vertical_sync                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT plane_converter
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          zoom                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          horizontal_offset               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          vertical_offset                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          horizontal_index                :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          vertical_index                  :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          c_re                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          c_im                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT mandelbroot_pipeline
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          c_re                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          c_im                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          result                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : vga_driver
    USE ENTITY work.vga_driver(rtl);

  FOR ALL : plane_converter
    USE ENTITY work.plane_converter(rtl);

  FOR ALL : mandelbroot_pipeline
    USE ENTITY work.mandelbroot_pipeline(rtl);

  -- Constants
  CONSTANT palette_lut_red_table_data     : vector_of_unsigned8(0 TO 127) := 
    (to_unsigned(16#00#, 8), to_unsigned(16#02#, 8), to_unsigned(16#03#, 8), to_unsigned(16#05#, 8),
     to_unsigned(16#06#, 8), to_unsigned(16#08#, 8), to_unsigned(16#09#, 8), to_unsigned(16#0B#, 8),
     to_unsigned(16#0D#, 8), to_unsigned(16#0E#, 8), to_unsigned(16#10#, 8), to_unsigned(16#11#, 8),
     to_unsigned(16#13#, 8), to_unsigned(16#14#, 8), to_unsigned(16#16#, 8), to_unsigned(16#18#, 8),
     to_unsigned(16#19#, 8), to_unsigned(16#1B#, 8), to_unsigned(16#1C#, 8), to_unsigned(16#1E#, 8),
     to_unsigned(16#1F#, 8), to_unsigned(16#24#, 8), to_unsigned(16#2A#, 8), to_unsigned(16#31#, 8),
     to_unsigned(16#37#, 8), to_unsigned(16#3D#, 8), to_unsigned(16#43#, 8), to_unsigned(16#49#, 8),
     to_unsigned(16#50#, 8), to_unsigned(16#56#, 8), to_unsigned(16#5C#, 8), to_unsigned(16#62#, 8),
     to_unsigned(16#69#, 8), to_unsigned(16#6F#, 8), to_unsigned(16#75#, 8), to_unsigned(16#7B#, 8),
     to_unsigned(16#81#, 8), to_unsigned(16#88#, 8), to_unsigned(16#8E#, 8), to_unsigned(16#94#, 8),
     to_unsigned(16#9A#, 8), to_unsigned(16#A0#, 8), to_unsigned(16#A7#, 8), to_unsigned(16#AD#, 8),
     to_unsigned(16#B3#, 8), to_unsigned(16#B9#, 8), to_unsigned(16#BF#, 8), to_unsigned(16#C6#, 8),
     to_unsigned(16#CC#, 8), to_unsigned(16#D2#, 8), to_unsigned(16#D8#, 8), to_unsigned(16#DE#, 8),
     to_unsigned(16#E5#, 8), to_unsigned(16#EB#, 8), to_unsigned(16#ED#, 8), to_unsigned(16#EE#, 8),
     to_unsigned(16#EF#, 8), to_unsigned(16#EF#, 8), to_unsigned(16#F0#, 8), to_unsigned(16#F1#, 8),
     to_unsigned(16#F1#, 8), to_unsigned(16#F2#, 8), to_unsigned(16#F3#, 8), to_unsigned(16#F3#, 8),
     to_unsigned(16#F4#, 8), to_unsigned(16#F4#, 8), to_unsigned(16#F5#, 8), to_unsigned(16#F6#, 8),
     to_unsigned(16#F6#, 8), to_unsigned(16#F7#, 8), to_unsigned(16#F8#, 8), to_unsigned(16#F8#, 8),
     to_unsigned(16#F9#, 8), to_unsigned(16#FA#, 8), to_unsigned(16#FA#, 8), to_unsigned(16#FB#, 8),
     to_unsigned(16#FB#, 8), to_unsigned(16#FC#, 8), to_unsigned(16#FD#, 8), to_unsigned(16#FD#, 8),
     to_unsigned(16#FE#, 8), to_unsigned(16#FF#, 8), to_unsigned(16#FD#, 8), to_unsigned(16#F7#, 8),
     to_unsigned(16#F2#, 8), to_unsigned(16#EC#, 8), to_unsigned(16#E6#, 8), to_unsigned(16#E1#, 8),
     to_unsigned(16#DB#, 8), to_unsigned(16#D5#, 8), to_unsigned(16#D0#, 8), to_unsigned(16#CA#, 8),
     to_unsigned(16#C5#, 8), to_unsigned(16#BF#, 8), to_unsigned(16#B9#, 8), to_unsigned(16#B4#, 8),
     to_unsigned(16#AE#, 8), to_unsigned(16#A8#, 8), to_unsigned(16#A3#, 8), to_unsigned(16#9D#, 8),
     to_unsigned(16#98#, 8), to_unsigned(16#92#, 8), to_unsigned(16#8C#, 8), to_unsigned(16#87#, 8),
     to_unsigned(16#81#, 8), to_unsigned(16#7C#, 8), to_unsigned(16#76#, 8), to_unsigned(16#70#, 8),
     to_unsigned(16#6B#, 8), to_unsigned(16#65#, 8), to_unsigned(16#5F#, 8), to_unsigned(16#5A#, 8),
     to_unsigned(16#54#, 8), to_unsigned(16#4F#, 8), to_unsigned(16#49#, 8), to_unsigned(16#43#, 8),
     to_unsigned(16#3E#, 8), to_unsigned(16#38#, 8), to_unsigned(16#33#, 8), to_unsigned(16#2D#, 8),
     to_unsigned(16#27#, 8), to_unsigned(16#22#, 8), to_unsigned(16#1C#, 8), to_unsigned(16#16#, 8),
     to_unsigned(16#11#, 8), to_unsigned(16#0B#, 8), to_unsigned(16#06#, 8), to_unsigned(16#00#, 8));  -- ufix8 [128]
  CONSTANT palette_lut_green_table_data   : vector_of_unsigned8(0 TO 127) := 
    (to_unsigned(16#07#, 8), to_unsigned(16#0C#, 8), to_unsigned(16#11#, 8), to_unsigned(16#16#, 8),
     to_unsigned(16#1B#, 8), to_unsigned(16#20#, 8), to_unsigned(16#25#, 8), to_unsigned(16#29#, 8),
     to_unsigned(16#2E#, 8), to_unsigned(16#33#, 8), to_unsigned(16#38#, 8), to_unsigned(16#3D#, 8),
     to_unsigned(16#42#, 8), to_unsigned(16#47#, 8), to_unsigned(16#4C#, 8), to_unsigned(16#51#, 8),
     to_unsigned(16#56#, 8), to_unsigned(16#5B#, 8), to_unsigned(16#60#, 8), to_unsigned(16#65#, 8),
     to_unsigned(16#69#, 8), to_unsigned(16#6E#, 8), to_unsigned(16#73#, 8), to_unsigned(16#77#, 8),
     to_unsigned(16#7B#, 8), to_unsigned(16#80#, 8), to_unsigned(16#84#, 8), to_unsigned(16#89#, 8),
     to_unsigned(16#8D#, 8), to_unsigned(16#92#, 8), to_unsigned(16#96#, 8), to_unsigned(16#9B#, 8),
     to_unsigned(16#9F#, 8), to_unsigned(16#A4#, 8), to_unsigned(16#A8#, 8), to_unsigned(16#AD#, 8),
     to_unsigned(16#B1#, 8), to_unsigned(16#B6#, 8), to_unsigned(16#BA#, 8), to_unsigned(16#BF#, 8),
     to_unsigned(16#C3#, 8), to_unsigned(16#C8#, 8), to_unsigned(16#CC#, 8), to_unsigned(16#D1#, 8),
     to_unsigned(16#D5#, 8), to_unsigned(16#DA#, 8), to_unsigned(16#DE#, 8), to_unsigned(16#E3#, 8),
     to_unsigned(16#E7#, 8), to_unsigned(16#EC#, 8), to_unsigned(16#F0#, 8), to_unsigned(16#F5#, 8),
     to_unsigned(16#F9#, 8), to_unsigned(16#FD#, 8), to_unsigned(16#FD#, 8), to_unsigned(16#FA#, 8),
     to_unsigned(16#F7#, 8), to_unsigned(16#F4#, 8), to_unsigned(16#F1#, 8), to_unsigned(16#EE#, 8),
     to_unsigned(16#EB#, 8), to_unsigned(16#E8#, 8), to_unsigned(16#E5#, 8), to_unsigned(16#E2#, 8),
     to_unsigned(16#DF#, 8), to_unsigned(16#DC#, 8), to_unsigned(16#D9#, 8), to_unsigned(16#D6#, 8),
     to_unsigned(16#D3#, 8), to_unsigned(16#D0#, 8), to_unsigned(16#CD#, 8), to_unsigned(16#CA#, 8),
     to_unsigned(16#C7#, 8), to_unsigned(16#C4#, 8), to_unsigned(16#C1#, 8), to_unsigned(16#BE#, 8),
     to_unsigned(16#BB#, 8), to_unsigned(16#B8#, 8), to_unsigned(16#B5#, 8), to_unsigned(16#B2#, 8),
     to_unsigned(16#AF#, 8), to_unsigned(16#AC#, 8), to_unsigned(16#A9#, 8), to_unsigned(16#A5#, 8),
     to_unsigned(16#A1#, 8), to_unsigned(16#9D#, 8), to_unsigned(16#9A#, 8), to_unsigned(16#96#, 8),
     to_unsigned(16#92#, 8), to_unsigned(16#8F#, 8), to_unsigned(16#8B#, 8), to_unsigned(16#87#, 8),
     to_unsigned(16#84#, 8), to_unsigned(16#80#, 8), to_unsigned(16#7C#, 8), to_unsigned(16#78#, 8),
     to_unsigned(16#75#, 8), to_unsigned(16#71#, 8), to_unsigned(16#6D#, 8), to_unsigned(16#6A#, 8),
     to_unsigned(16#66#, 8), to_unsigned(16#62#, 8), to_unsigned(16#5F#, 8), to_unsigned(16#5B#, 8),
     to_unsigned(16#57#, 8), to_unsigned(16#53#, 8), to_unsigned(16#50#, 8), to_unsigned(16#4C#, 8),
     to_unsigned(16#48#, 8), to_unsigned(16#45#, 8), to_unsigned(16#41#, 8), to_unsigned(16#3D#, 8),
     to_unsigned(16#3A#, 8), to_unsigned(16#36#, 8), to_unsigned(16#32#, 8), to_unsigned(16#2E#, 8),
     to_unsigned(16#2B#, 8), to_unsigned(16#27#, 8), to_unsigned(16#23#, 8), to_unsigned(16#20#, 8),
     to_unsigned(16#1C#, 8), to_unsigned(16#18#, 8), to_unsigned(16#15#, 8), to_unsigned(16#11#, 8),
     to_unsigned(16#0D#, 8), to_unsigned(16#09#, 8), to_unsigned(16#06#, 8), to_unsigned(16#02#, 8));  -- ufix8 [128]
  CONSTANT palette_lut_blue_table_data    : vector_of_unsigned8(0 TO 127) := 
    (to_unsigned(16#64#, 8), to_unsigned(16#69#, 8), to_unsigned(16#6E#, 8), to_unsigned(16#73#, 8),
     to_unsigned(16#78#, 8), to_unsigned(16#7D#, 8), to_unsigned(16#82#, 8), to_unsigned(16#87#, 8),
     to_unsigned(16#8D#, 8), to_unsigned(16#92#, 8), to_unsigned(16#97#, 8), to_unsigned(16#9C#, 8),
     to_unsigned(16#A1#, 8), to_unsigned(16#A6#, 8), to_unsigned(16#AB#, 8), to_unsigned(16#B0#, 8),
     to_unsigned(16#B5#, 8), to_unsigned(16#BA#, 8), to_unsigned(16#BF#, 8), to_unsigned(16#C4#, 8),
     to_unsigned(16#C9#, 8), to_unsigned(16#CC#, 8), to_unsigned(16#CE#, 8), to_unsigned(16#CF#, 8),
     to_unsigned(16#D1#, 8), to_unsigned(16#D2#, 8), to_unsigned(16#D4#, 8), to_unsigned(16#D6#, 8),
     to_unsigned(16#D7#, 8), to_unsigned(16#D9#, 8), to_unsigned(16#DA#, 8), to_unsigned(16#DC#, 8),
     to_unsigned(16#DD#, 8), to_unsigned(16#DF#, 8), to_unsigned(16#E1#, 8), to_unsigned(16#E2#, 8),
     to_unsigned(16#E4#, 8), to_unsigned(16#E5#, 8), to_unsigned(16#E7#, 8), to_unsigned(16#E8#, 8),
     to_unsigned(16#EA#, 8), to_unsigned(16#EC#, 8), to_unsigned(16#ED#, 8), to_unsigned(16#EF#, 8),
     to_unsigned(16#F0#, 8), to_unsigned(16#F2#, 8), to_unsigned(16#F3#, 8), to_unsigned(16#F5#, 8),
     to_unsigned(16#F7#, 8), to_unsigned(16#F8#, 8), to_unsigned(16#FA#, 8), to_unsigned(16#FB#, 8),
     to_unsigned(16#FD#, 8), to_unsigned(16#FE#, 8), to_unsigned(16#F9#, 8), to_unsigned(16#F0#, 8),
     to_unsigned(16#E7#, 8), to_unsigned(16#DE#, 8), to_unsigned(16#D5#, 8), to_unsigned(16#CC#, 8),
     to_unsigned(16#C3#, 8), to_unsigned(16#BA#, 8), to_unsigned(16#B1#, 8), to_unsigned(16#A8#, 8),
     to_unsigned(16#9F#, 8), to_unsigned(16#96#, 8), to_unsigned(16#8D#, 8), to_unsigned(16#84#, 8),
     to_unsigned(16#7B#, 8), to_unsigned(16#72#, 8), to_unsigned(16#69#, 8), to_unsigned(16#60#, 8),
     to_unsigned(16#57#, 8), to_unsigned(16#4E#, 8), to_unsigned(16#45#, 8), to_unsigned(16#3C#, 8),
     to_unsigned(16#33#, 8), to_unsigned(16#29#, 8), to_unsigned(16#20#, 8), to_unsigned(16#17#, 8),
     to_unsigned(16#0E#, 8), to_unsigned(16#05#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8),
     to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8), to_unsigned(16#00#, 8));  -- ufix8 [128]

  -- Signals
  SIGNAL vga_driver_out1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL vga_driver_out2                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL vga_driver_out3                  : std_logic;
  SIGNAL vga_driver_out4                  : std_logic;
  SIGNAL vga_driver_out5                  : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 128);  -- ufix1 [129]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 128);  -- ufix1 [129]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 128);  -- ufix1 [129]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL plane_converter_out1_re          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL plane_converter_out1_im          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL plane_converter_out1_re_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL plane_converter_out1_im_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Unit_Delay3_out1_re              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Unit_Delay3_out1_im              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL mandelbroot_pipeline_out1        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL mandelbroot_pipeline_out1_unsigned : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL vga_driver_out1_unsigned         : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Slice_out1                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Switch1_out1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL palette_lut_red_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL palette_lut_green_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL palette_lut_blue_out1            : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_vga_driver : vga_driver
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              enable => enable,
              horizontal_index => vga_driver_out1,  -- uint16
              vertical_index => vga_driver_out2,  -- uint16
              video_enable => vga_driver_out3,
              horizontal_sync => vga_driver_out4,
              vertical_sync => vga_driver_out5
              );

  u_plane_converter : plane_converter
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              zoom => zoom,  -- sfix18_En15
              horizontal_offset => horizontal_offset,  -- sfix18_En15
              vertical_offset => vertical_offset,  -- sfix18_En15
              horizontal_index => vga_driver_out1,  -- uint16
              vertical_index => vga_driver_out2,  -- uint16
              c_re => plane_converter_out1_re,  -- sfix18_En15
              c_im => plane_converter_out1_im  -- sfix18_En15
              );

  u_mandelbroot_pipeline : mandelbroot_pipeline
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              c_re => std_logic_vector(Unit_Delay3_out1_re),  -- sfix18_En15
              c_im => std_logic_vector(Unit_Delay3_out1_im),  -- sfix18_En15
              result => mandelbroot_pipeline_out1  -- ufix7
              );

  Delay2_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Delay2_reg(0) <= vga_driver_out3;
      Delay2_reg(1 TO 128) <= Delay2_reg(0 TO 127);
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(128);

  Logical_Operator_out1 <=  NOT vga_driver_out4;

  Delay1_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Delay1_reg(0) <= Logical_Operator_out1;
      Delay1_reg(1 TO 128) <= Delay1_reg(0 TO 127);
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(128);

  Logical_Operator1_out1 <=  NOT vga_driver_out5;

  Delay_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Delay_reg(0) <= Logical_Operator1_out1;
      Delay_reg(1 TO 128) <= Delay_reg(0 TO 127);
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(128);

  plane_converter_out1_re_signed <= signed(plane_converter_out1_re);

  plane_converter_out1_im_signed <= signed(plane_converter_out1_im);

  Unit_Delay3_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Unit_Delay3_out1_re <= to_signed(16#00000#, 18);
      Unit_Delay3_out1_im <= to_signed(16#00000#, 18);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Unit_Delay3_out1_re <= plane_converter_out1_re_signed;
      Unit_Delay3_out1_im <= plane_converter_out1_im_signed;
    END IF;
  END PROCESS Unit_Delay3_process;


  mandelbroot_pipeline_out1_unsigned <= unsigned(mandelbroot_pipeline_out1);

  vga_driver_out1_unsigned <= unsigned(vga_driver_out1);

  Bit_Slice_out1 <= vga_driver_out1_unsigned(6 DOWNTO 0);

  
  Switch1_out1 <= mandelbroot_pipeline_out1_unsigned WHEN video_test = '0' ELSE
      Bit_Slice_out1;

  palette_lut_red_out1 <= palette_lut_red_table_data(to_integer(Switch1_out1));

  red <= std_logic_vector(palette_lut_red_out1);

  palette_lut_green_out1 <= palette_lut_green_table_data(to_integer(Switch1_out1));

  green <= std_logic_vector(palette_lut_green_out1);

  palette_lut_blue_out1 <= palette_lut_blue_table_data(to_integer(Switch1_out1));

  blue <= std_logic_vector(palette_lut_blue_out1);

  video_enable <= Delay2_out1;

  horizontal_sync <= Delay1_out1;

  vertical_sync <= Delay_out1;

END rtl;

