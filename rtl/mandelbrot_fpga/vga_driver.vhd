-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\vga_driver.vhd
-- Created: 2019-10-07 19:53:20
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: vga_driver
-- Source Path: mandelbrot_fpga/mandelbrot_top/mandelbrot_core/vga_driver
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY vga_driver IS
  PORT( i_clk                             :   IN    std_logic;
        i_reset_n                         :   IN    std_logic;
        enable                            :   IN    std_logic;
        horizontal_index                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        vertical_index                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        video_enable                      :   OUT   std_logic;
        horizontal_sync                   :   OUT   std_logic;
        vertical_sync                     :   OUT   std_logic
        );
END vga_driver;


ARCHITECTURE rtl OF vga_driver IS

  -- Component Declarations
  COMPONENT horizontal_ranges
    PORT( count                           :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          resolution                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          front_porch                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          sync                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          back_porch                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          index                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          sync_pulse                      :   OUT   std_logic;
          eoc                             :   OUT   std_logic;
          video_enable                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT vertical_ranges
    PORT( count                           :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          resolution                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          front_porch                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          sync                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          index                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          sync_pulse                      :   OUT   std_logic;
          video_enable                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : horizontal_ranges
    USE ENTITY work.horizontal_ranges(rtl);

  FOR ALL : vertical_ranges
    USE ENTITY work.vertical_ranges(rtl);

  -- Signals
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL pixel_counter_out1               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL horizontal_counter_out1          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant2_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant3_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL horizontal_ranges_out1           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL horizontal_ranges_out2           : std_logic;
  SIGNAL horizontal_ranges_out3           : std_logic;
  SIGNAL horizontal_ranges_out4           : std_logic;
  SIGNAL vertical_counter_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant4_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant5_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant6_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL vertical_ranges_out1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL vertical_ranges_out2             : std_logic;
  SIGNAL vertical_ranges_out4             : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;

BEGIN
  u_horizontal_ranges : horizontal_ranges
    PORT MAP( count => std_logic_vector(horizontal_counter_out1),  -- uint16
              resolution => std_logic_vector(Constant_out1),  -- uint16
              front_porch => std_logic_vector(Constant1_out1),  -- uint16
              sync => std_logic_vector(Constant2_out1),  -- uint16
              back_porch => std_logic_vector(Constant3_out1),  -- uint16
              index => horizontal_ranges_out1,  -- uint16
              sync_pulse => horizontal_ranges_out2,
              eoc => horizontal_ranges_out3,
              video_enable => horizontal_ranges_out4
              );

  u_vertical_ranges : vertical_ranges
    PORT MAP( count => std_logic_vector(vertical_counter_out1),  -- uint16
              resolution => std_logic_vector(Constant4_out1),  -- uint16
              front_porch => std_logic_vector(Constant5_out1),  -- uint16
              sync => std_logic_vector(Constant6_out1),  -- uint16
              index => vertical_ranges_out1,  -- uint16
              sync_pulse => vertical_ranges_out2,
              video_enable => vertical_ranges_out4
              );

  Logical_Operator_out1 <=  NOT enable;

  Logical_Operator1_out1 <= Compare_To_Constant_out1 OR Logical_Operator_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  pixel_counter_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      pixel_counter_out1 <= to_unsigned(16#00#, 8);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      IF Logical_Operator1_out1 = '1' THEN 
        pixel_counter_out1 <= to_unsigned(16#00#, 8);
      ELSIF pixel_counter_out1 >= to_unsigned(16#01#, 8) THEN 
        pixel_counter_out1 <= to_unsigned(16#00#, 8);
      ELSE 
        pixel_counter_out1 <= pixel_counter_out1 + to_unsigned(16#01#, 8);
      END IF;
    END IF;
  END PROCESS pixel_counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN pixel_counter_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1649
  horizontal_counter_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      horizontal_counter_out1 <= to_unsigned(16#0000#, 16);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      IF Logical_Operator_out1 = '1' THEN 
        horizontal_counter_out1 <= to_unsigned(16#0000#, 16);
      ELSIF Compare_To_Constant_out1 = '1' THEN 
        IF horizontal_counter_out1 >= to_unsigned(16#0671#, 16) THEN 
          horizontal_counter_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          horizontal_counter_out1 <= horizontal_counter_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS horizontal_counter_process;


  Constant_out1 <= to_unsigned(16#0500#, 16);

  Constant1_out1 <= to_unsigned(16#006E#, 16);

  Constant2_out1 <= to_unsigned(16#0028#, 16);

  Constant3_out1 <= to_unsigned(16#00DC#, 16);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 749
  vertical_counter_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      vertical_counter_out1 <= to_unsigned(16#0000#, 16);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      IF Logical_Operator_out1 = '1' THEN 
        vertical_counter_out1 <= to_unsigned(16#0000#, 16);
      ELSIF horizontal_ranges_out3 = '1' THEN 
        IF vertical_counter_out1 >= to_unsigned(16#02ED#, 16) THEN 
          vertical_counter_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          vertical_counter_out1 <= vertical_counter_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS vertical_counter_process;


  Constant4_out1 <= to_unsigned(16#02D0#, 16);

  Constant5_out1 <= to_unsigned(16#0005#, 16);

  Constant6_out1 <= to_unsigned(16#0005#, 16);

  Logical_Operator2_out1 <= horizontal_ranges_out4 AND vertical_ranges_out4;

  horizontal_index <= horizontal_ranges_out1;

  vertical_index <= vertical_ranges_out1;

  video_enable <= Logical_Operator2_out1;

  horizontal_sync <= horizontal_ranges_out2;

  vertical_sync <= vertical_ranges_out2;

END rtl;

