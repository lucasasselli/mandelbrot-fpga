-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\mandelbroot_array.vhd
-- Created: 2019-10-07 19:53:19
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mandelbroot_array
-- Source Path: mandelbrot_fpga/mandelbrot_top/mandelbrot_core/mandelbroot_pipeline/mandelbroot_array
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mandelbroot_array IS
  PORT( stop_in                           :   IN    std_logic;
        z_in_re                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        z_in_im                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_in_re                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_in_im                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        i_in                              :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
        stop_out                          :   OUT   std_logic;
        z_out_re                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        z_out_im                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_out_re                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_out_im                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        i_out                             :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
        );
END mandelbroot_array;


ARCHITECTURE rtl OF mandelbroot_array IS

  -- Signals
  SIGNAL z_in_re_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL z_in_im_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product1_out1                    : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product2_out1                    : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Add_add_cast                     : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Add_add_cast_1                   : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Add_out1                         : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Add1_out1                        : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product3_out1                    : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Gain_cast                        : signed(71 DOWNTO 0);  -- sfix72_En60
  SIGNAL Gain_out1                        : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL c_in_re_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL c_in_im_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Sum_add_cast                     : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_add_cast_1                   : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_add_temp                     : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_add_cast_2                   : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_add_cast_3                   : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_add_temp_1                   : signed(36 DOWNTO 0);  -- sfix37_En30
  SIGNAL Sum_out1_re                      : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Sum_out1_im                      : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Data_Type_Conversion2_out1_re    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Data_Type_Conversion2_out1_im    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL i_in_unsigned                    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_out1                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Switch_out1                      : unsigned(6 DOWNTO 0);  -- ufix7

BEGIN
  z_in_re_signed <= signed(z_in_re);

  Product1_out1 <= z_in_re_signed * z_in_re_signed;

  z_in_im_signed <= signed(z_in_im);

  Product2_out1 <= z_in_im_signed * z_in_im_signed;

  Add_add_cast <= resize(Product1_out1, 37);
  Add_add_cast_1 <= resize(Product2_out1, 37);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  
  Compare_To_Constant_out1 <= '1' WHEN Add_out1 >= signed'("0000100000000000000000000000000000000") ELSE
      '0';

  Logical_Operator_out1 <= stop_in OR Compare_To_Constant_out1;

  Add1_out1 <= Product1_out1 - Product2_out1;

  Product3_out1 <= z_in_re_signed * z_in_im_signed;

  Gain_cast <= resize(Product3_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 72);
  Gain_out1 <= Gain_cast(65 DOWNTO 30);

  c_in_re_signed <= signed(c_in_re);

  c_in_im_signed <= signed(c_in_im);

  Sum_add_cast <= resize(Add1_out1, 37);
  Sum_add_cast_1 <= resize(c_in_re_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 37);
  Sum_add_temp <= Sum_add_cast + Sum_add_cast_1;
  Sum_out1_re <= Sum_add_temp(35 DOWNTO 0);
  Sum_add_cast_2 <= resize(Gain_out1, 37);
  Sum_add_cast_3 <= resize(c_in_im_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 37);
  Sum_add_temp_1 <= Sum_add_cast_2 + Sum_add_cast_3;
  Sum_out1_im <= Sum_add_temp_1(35 DOWNTO 0);

  Data_Type_Conversion2_out1_re <= Sum_out1_re(32 DOWNTO 15);
  Data_Type_Conversion2_out1_im <= Sum_out1_im(32 DOWNTO 15);

  z_out_re <= std_logic_vector(Data_Type_Conversion2_out1_re);

  z_out_im <= std_logic_vector(Data_Type_Conversion2_out1_im);

  i_in_unsigned <= unsigned(i_in);

  Constant_out1 <= to_unsigned(16#01#, 8);

  Sum1_out1 <= i_in_unsigned + resize(Constant_out1, 7);

  
  Switch_out1 <= Sum1_out1 WHEN Logical_Operator_out1 = '0' ELSE
      i_in_unsigned;

  i_out <= std_logic_vector(Switch_out1);

  stop_out <= Logical_Operator_out1;

  c_out_re <= c_in_re;

  c_out_im <= c_in_im;

END rtl;

