-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\plane_converter.vhd
-- Created: 2019-10-07 19:53:20
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: plane_converter
-- Source Path: mandelbrot_fpga/mandelbrot_top/mandelbrot_core/plane_converter 
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY plane_converter IS
  PORT( i_clk                             :   IN    std_logic;
        i_reset_n                         :   IN    std_logic;
        zoom                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        horizontal_offset                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        vertical_offset                   :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        horizontal_index                  :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        vertical_index                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        c_re                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_im                              :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END plane_converter;


ARCHITECTURE rtl OF plane_converter IS

  -- Signals
  SIGNAL zoom_signed                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL horizontal_offset_signed         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL horizontal_index_unsigned        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion_out1        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Constant4_out1                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Subtract_out1                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant2_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL vertical_offset_signed           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant1_out1                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL vertical_index_unsigned          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion1_out1       : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Subtract1_out1                   : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Product2_out1                    : signed(30 DOWNTO 0);  -- sfix31_En15
  SIGNAL Add_add_cast                     : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add_add_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Product3_out1                    : signed(30 DOWNTO 0);  -- sfix31_En15
  SIGNAL Add1_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add1_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Unit_Delay_out1_re               : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Unit_Delay_out1_im               : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Product1_out1_re                 : signed(49 DOWNTO 0);  -- sfix50_En30
  SIGNAL Product1_out1_im                 : signed(49 DOWNTO 0);  -- sfix50_En30
  SIGNAL Data_Type_Conversion2_out1_re    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Data_Type_Conversion2_out1_im    : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  zoom_signed <= signed(zoom);

  horizontal_offset_signed <= signed(horizontal_offset);

  horizontal_index_unsigned <= unsigned(horizontal_index);

  Data_Type_Conversion_out1 <= signed(horizontal_index_unsigned(11 DOWNTO 0));

  Constant4_out1 <= to_signed(16#280#, 12);

  Subtract_out1 <= resize(Data_Type_Conversion_out1, 13) - resize(Constant4_out1, 13);

  Constant2_out1 <= to_signed(16#0005B#, 18);

  vertical_offset_signed <= signed(vertical_offset);

  Constant1_out1 <= to_signed(16#168#, 12);

  vertical_index_unsigned <= unsigned(vertical_index);

  Data_Type_Conversion1_out1 <= signed(vertical_index_unsigned(11 DOWNTO 0));

  Subtract1_out1 <= resize(Constant1_out1, 13) - resize(Data_Type_Conversion1_out1, 13);

  Product2_out1 <= Subtract_out1 * Constant2_out1;

  Add_add_cast <= resize(horizontal_offset_signed, 32);
  Add_add_cast_1 <= resize(Product2_out1, 32);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Product3_out1 <= Subtract1_out1 * Constant2_out1;

  Add1_add_cast <= resize(vertical_offset_signed, 32);
  Add1_add_cast_1 <= resize(Product3_out1, 32);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  Unit_Delay_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Unit_Delay_out1_re <= to_signed(0, 32);
      Unit_Delay_out1_im <= to_signed(0, 32);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Unit_Delay_out1_re <= Add_out1;
      Unit_Delay_out1_im <= Add1_out1;
    END IF;
  END PROCESS Unit_Delay_process;


  Product1_out1_re <= zoom_signed * Unit_Delay_out1_re;
  Product1_out1_im <= zoom_signed * Unit_Delay_out1_im;

  Data_Type_Conversion2_out1_re <= Product1_out1_re(32 DOWNTO 15);
  Data_Type_Conversion2_out1_im <= Product1_out1_im(32 DOWNTO 15);

  c_re <= std_logic_vector(Data_Type_Conversion2_out1_re);

  c_im <= std_logic_vector(Data_Type_Conversion2_out1_im);

END rtl;

