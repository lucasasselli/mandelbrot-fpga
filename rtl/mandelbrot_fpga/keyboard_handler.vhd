-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\keyboard_handler.vhd
-- Created: 2019-10-07 19:53:19
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: keyboard_handler
-- Source Path: mandelbrot_fpga/mandelbrot_top/keyboard_handler 
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY keyboard_handler IS
  PORT( i_clk                             :   IN    std_logic;
        i_reset_n                         :   IN    std_logic;
        right                             :   IN    std_logic;
        left                              :   IN    std_logic;
        up                                :   IN    std_logic;
        down                              :   IN    std_logic;
        zoom_in                           :   IN    std_logic;
        zoom_out                          :   IN    std_logic;
        deglitch_threshold                :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        deglitch_enable                   :   IN    std_logic;
        zoom                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        horizontal_offset                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        vertical_offset                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END keyboard_handler;


ARCHITECTURE rtl OF keyboard_handler IS

  -- Component Declarations
  COMPONENT zoom_in_deglitch
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT zoom_out_deglitch
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT zoom_accumulator
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          val1_pulse                      :   IN    std_logic;
          val2_pulse                      :   IN    std_logic;
          val1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          val2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          out_rsvd                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT right_deglitch
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT left_degltich
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT horizontal_accumulator
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          val1_pulse                      :   IN    std_logic;
          val2_pulse                      :   IN    std_logic;
          val1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          val2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          out_rsvd                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT up_deglitch
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT down_deglitch
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          threshold                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          enable                          :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT vertical_accumulator
    PORT( i_clk                           :   IN    std_logic;
          i_reset_n                       :   IN    std_logic;
          val1_pulse                      :   IN    std_logic;
          val2_pulse                      :   IN    std_logic;
          val1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          val2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          out_rsvd                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : zoom_in_deglitch
    USE ENTITY work.zoom_in_deglitch(rtl);

  FOR ALL : zoom_out_deglitch
    USE ENTITY work.zoom_out_deglitch(rtl);

  FOR ALL : zoom_accumulator
    USE ENTITY work.zoom_accumulator(rtl);

  FOR ALL : right_deglitch
    USE ENTITY work.right_deglitch(rtl);

  FOR ALL : left_degltich
    USE ENTITY work.left_degltich(rtl);

  FOR ALL : horizontal_accumulator
    USE ENTITY work.horizontal_accumulator(rtl);

  FOR ALL : up_deglitch
    USE ENTITY work.up_deglitch(rtl);

  FOR ALL : down_deglitch
    USE ENTITY work.down_deglitch(rtl);

  FOR ALL : vertical_accumulator
    USE ENTITY work.vertical_accumulator(rtl);

  -- Signals
  SIGNAL zoom_in_deglitch_out1            : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL zoom_out_deglitch_out1           : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Constant3_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant4_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL zoom_accumulator_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product5_mul_temp                : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product5_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL zoom_accumulator_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Product4_mul_temp                : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product4_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL right_deglitch_out1              : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL left_degltich_out1               : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Constant_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_mul_temp                : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product2_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL horizontal_accumulator_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add1_out1                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL horizontal_accumulator_out1      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Add_out1                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL up_deglitch_out1                 : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL down_deglitch_out1               : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Constant1_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product1_mul_temp                : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product1_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL vertical_accumulator_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add3_out1                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL vertical_accumulator_out1        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Add2_out1                        : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  u_zoom_in_deglitch : zoom_in_deglitch
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => zoom_in,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => zoom_in_deglitch_out1
              );

  u_zoom_out_deglitch : zoom_out_deglitch
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => zoom_out,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => zoom_out_deglitch_out1
              );

  u_zoom_accumulator : zoom_accumulator
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              val1_pulse => Logical_Operator1_out1,
              val2_pulse => Logical_Operator_out1,
              val1 => std_logic_vector(Product4_out1),  -- sfix18_En15
              val2 => std_logic_vector(Product5_out1),  -- sfix18_En15
              out_rsvd => zoom_accumulator_out1  -- sfix18_En15
              );

  u_right_deglitch : right_deglitch
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => right,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => right_deglitch_out1
              );

  u_left_degltich : left_degltich
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => left,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => left_degltich_out1
              );

  u_horizontal_accumulator : horizontal_accumulator
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              val1_pulse => Logical_Operator5_out1,
              val2_pulse => Logical_Operator4_out1,
              val1 => std_logic_vector(Add_out1),  -- sfix18_En15
              val2 => std_logic_vector(Add1_out1),  -- sfix18_En15
              out_rsvd => horizontal_accumulator_out1  -- sfix18_En15
              );

  u_up_deglitch : up_deglitch
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => up,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => up_deglitch_out1
              );

  u_down_deglitch : down_deglitch
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              in_rsvd => down,
              threshold => deglitch_threshold,  -- uint8
              enable => deglitch_enable,
              out_rsvd => down_deglitch_out1
              );

  u_vertical_accumulator : vertical_accumulator
    PORT MAP( i_clk => i_clk,
              i_reset_n => i_reset_n,
              val1_pulse => Logical_Operator3_out1,
              val2_pulse => Logical_Operator2_out1,
              val1 => std_logic_vector(Add2_out1),  -- sfix18_En15
              val2 => std_logic_vector(Add3_out1),  -- sfix18_En15
              out_rsvd => vertical_accumulator_out1  -- sfix18_En15
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 11
  HDL_Counter_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 8);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      IF deglitch_enable = '1' THEN 
        IF HDL_Counter_out1 >= to_unsigned(16#0B#, 8) THEN 
          HDL_Counter_out1 <= to_unsigned(16#00#, 8);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#0B#, 8) ELSE
      '0';

  Logical_Operator1_out1 <= zoom_in_deglitch_out1 AND Compare_To_Constant_out1;

  Logical_Operator_out1 <= zoom_out_deglitch_out1 AND Compare_To_Constant_out1;

  Constant3_out1 <= to_signed(16#07D71#, 18);

  Constant4_out1 <= to_signed(16#0829D#, 18);

  Product5_mul_temp <= Constant4_out1 * zoom_accumulator_out1_signed;
  Product5_out1 <= Product5_mul_temp(32 DOWNTO 15);

  zoom_accumulator_out1_signed <= signed(zoom_accumulator_out1);

  Product4_mul_temp <= Constant3_out1 * zoom_accumulator_out1_signed;
  Product4_out1 <= Product4_mul_temp(32 DOWNTO 15);

  Logical_Operator5_out1 <= right_deglitch_out1 AND Compare_To_Constant_out1;

  Logical_Operator4_out1 <= left_degltich_out1 AND Compare_To_Constant_out1;

  Constant_out1 <= to_signed(16#00CCD#, 18);

  Product2_mul_temp <= Constant_out1 * zoom_accumulator_out1_signed;
  Product2_out1 <= Product2_mul_temp(32 DOWNTO 15);

  Add1_out1 <= horizontal_accumulator_out1_signed - Product2_out1;

  horizontal_accumulator_out1_signed <= signed(horizontal_accumulator_out1);

  Add_out1 <= horizontal_accumulator_out1_signed + Product2_out1;

  Logical_Operator3_out1 <= up_deglitch_out1 AND Compare_To_Constant_out1;

  Logical_Operator2_out1 <= down_deglitch_out1 AND Compare_To_Constant_out1;

  Constant1_out1 <= to_signed(16#00CCD#, 18);

  Product1_mul_temp <= Constant1_out1 * zoom_accumulator_out1_signed;
  Product1_out1 <= Product1_mul_temp(32 DOWNTO 15);

  Add3_out1 <= vertical_accumulator_out1_signed - Product1_out1;

  vertical_accumulator_out1_signed <= signed(vertical_accumulator_out1);

  Add2_out1 <= vertical_accumulator_out1_signed + Product1_out1;

  zoom <= zoom_accumulator_out1;

  horizontal_offset <= horizontal_accumulator_out1;

  vertical_offset <= vertical_accumulator_out1;

END rtl;

