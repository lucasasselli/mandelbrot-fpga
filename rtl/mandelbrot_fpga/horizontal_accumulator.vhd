-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mandelbrot_fpga\horizontal_accumulator.vhd
-- Created: 2019-10-07 19:53:19
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: horizontal_accumulator
-- Source Path: mandelbrot_fpga/mandelbrot_top/keyboard_handler /horizontal_accumulator
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY horizontal_accumulator IS
  PORT( i_clk                             :   IN    std_logic;
        i_reset_n                         :   IN    std_logic;
        val1_pulse                        :   IN    std_logic;
        val2_pulse                        :   IN    std_logic;
        val1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        val2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out_rsvd                          :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END horizontal_accumulator;


ARCHITECTURE rtl OF horizontal_accumulator IS

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL val2_signed                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL val1_signed                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  Delay1_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Delay1_out1 <= '0';
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Delay1_out1 <= val1_pulse;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator1_out1 <=  NOT Delay1_out1;

  Logical_Operator_out1 <= Logical_Operator1_out1 AND val1_pulse;

  Delay2_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Delay2_out1 <= '0';
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      Delay2_out1 <= val2_pulse;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator3_out1 <=  NOT Delay2_out1;

  Logical_Operator2_out1 <= Logical_Operator3_out1 AND val2_pulse;

  Logical_Operator4_out1 <= Logical_Operator_out1 OR Logical_Operator2_out1;

  val2_signed <= signed(val2);

  val1_signed <= signed(val1);

  
  Switch_out1 <= val2_signed WHEN Logical_Operator_out1 = '0' ELSE
      val1_signed;

  Unit_Delay_Enabled_Synchronous_process : PROCESS (i_clk, i_reset_n)
  BEGIN
    IF i_reset_n = '0' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= to_signed(16#00000#, 18);
    ELSIF i_clk'EVENT AND i_clk = '1' THEN
      IF Logical_Operator4_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  out_rsvd <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

END rtl;

